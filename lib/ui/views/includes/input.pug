- var controllerName = ui.controller.name ? ui.controller.name : ui.controller;
- var formName = 'main';
- var itemName = 'vulpejs.item';
unless input.css
  - input.css = {'class':'form-group col-sm-12 col-md-12 col-lg-12'};
if ui.main
  if ui.main.form && ui.main.form.name
    - formName = ui.main.form.name;
  if ui.main.item && ui.main.item.name
    - itemName = ui.main.item.name;
else
  if ui.form && ui.form.name
    - formName = ui.form.name;
  if ui.item && ui.item.name
    - itemName = ui.item.name;

unless input.model
  - input.model = input.name;

if input.type === 'timer' && input.startTime
  - input.model = input.startTime;

- var ngModel = itemName + '.' + input.model;
if input.alias
  - ngModel = input.alias + '.' + input.model;

unless input.id
  - input.id = controllerName.toLowerCase() + '-' + input.name.replace(/\./g, '-');

unless input.autofocus
  - input.autofocus = false;

unless input.required
  - input.required = false;

unless input.validate
  - input.validate = {expression: '', watch: '', message: ''};

unless input.validate.watch
  - input.validate.watch = '';

unless input.validate.message
  - input.validate.message = '';

- var attributes = {};
- var divAttributes = {};
- var showAttributes = {};
- var hideAttributes = {};
- var divClass = 'form-group col-sm-12 col-md-12 col-lg-12';

if input.mask
  if typeof input.mask === 'string'
    - attributes[input.mask] = '';
  else
    - attributes['ui-mask'] = input.mask.pattern;

if input.autofocus
  - attributes['autofocus'] = '';

if (input.type === 'text' || input.type === 'typeahead') && !input.autocomplete
  - attributes['autocomplete'] = 'false';

if input.case
  - input.case = input.case.toLowerCase();
  if input.case === 'lower'
    - attributes['lowercase'] = '';
  if input.case === 'upper'
    - attributes['uppercase'] = '';

if input.capitalize
  - input.capitalize = input.capitalize.toLowerCase();
  if input.capitalize === 'all'
    - attributes['capitalize'] = '';
  if input.capitalize === 'first'
    - attributes['capitalize-first'] = '';

if input.only
  - input.only = input.only.toLowerCase();
  - attributes['only-' + input.only] = '';

if input.currency || input.money
  - attributes['ui-money-mask'] = '';

if input.required
  if typeof input.required === 'string'
    - attributes['ng-required'] = input.required;
  else
    - attributes['required'] = '';

if input.type === 'textarea'
  unless input.rows
    - input.rows = 2;
  - attributes['rows'] = input.rows;

if input.show
  - divAttributes['ng-if'] = input.show;
  - divClass += ' slide-down';

if input.hide
  - divAttributes['ng-hide'] = input.hide;
  - divClass += ' slide-down';

if input.readonly
  - hideAttributes['ng-cloak'] = '';
  - hideAttributes['ng-hide'] = input.readonly;
  - showAttributes['ng-cloak'] = '';
  - showAttributes['ng-show'] = input.readonly;
  if input.type !== 'star-rating'
    - attributes['ng-cloak'] = '';
    - attributes['ng-hide'] = input.readonly;

if input.validate
  if input.validate.expression
    - attributes['ui-validate'] = input.validate.expression;
  if input.validate.watch
    - attributes['ui-validate-watch'] = input.validate.watch;

if input.ng
  if input.ng.pattern
    - attributes['ng-pattern'] = input.ng.pattern;

if input.on
  if input.on.blur
    - attributes['ng-blur'] = input.on.blur;
  if input.on.change
    - attributes['ng-change'] = input.on.change;
  if input.on.focus
    - attributes['ng-focus'] = input.on.focus;
  if input.on.click
    - attributes['ng-click'] = input.on.click;
else if input.items
  - attributes['ng-change'] = "vulpejs.ui.on.change({type: 'SELECT', name: '" + input.name + "', items: '" + input.items.name + "', value: '" + input.items.value + "', label: '" + input.items.label + "'})";

if input.type === 'typeahead'
  if input.query
    - attributes['typeahead'] = input.query;
  if input.on && input.on.select
    if input.on.select.indexOf('=') !== -1
      - var parts = input.on.select.split('=');
      - var onSelect = "vulpejs.ui.on.select({type: 'TYPEAHEAD', rootProperty:'" + parts[0] + "', item: $item, itemProperty: '" + parts[1] + "'})";
      - attributes['typeahead-on-select'] = onSelect;
    else
      - attributes['typeahead-on-select'] = input.on.select;

if input.toggle
  - attributes['toggle-switch'] = '';
  - attributes['model'] = ngModel;
  if input.toggle.on
    - attributes['on-label'] = __(input.toggle.on);
  if input.toggle.off
    - attributes['off-label'] = __(input.toggle.off);
  if input.toggle.knob
    - attributes['knob-label'] = __(input.toggle.knob);
  if input.css['class'] === 'form-control'
    - input.css['class'] = '';
else
  - attributes['ng-model'] =  ngModel;
  if input.type === 'checkbox' || input.type === 'group'
    - input.css['class'] = '';

- var label = __(input.label)

if !input.mask || !input.mask.pattern
  - attributes['placeholder'] = label;

- var divNgClass = "{'has-error': vulpejs.ui.form." + formName + "." + input.name + ".$invalid && vulpejs.ui.form." + formName + ".submitted}";

if input.readonly
  - divNgClass = "{'has-error': vulpejs.ui.form." + formName + "." + input.name + ".$invalid && vulpejs.ui.form." + formName + ".submitted, 'col-lg-3': " + input.readonly + "}";

if input.type === 'show' || input.type === 'timer'
  if input.css['class'] === 'form-control'
    - input.css['class'] = '';
  - divNgClass = '';
- divClass = input.css['class'] ? input.css['class'] : 'col-lg-12';

div(class=divClass ng-class=divNgClass)&attributes(divAttributes)
  label.control-label(for=input.id)=label
  if input.type === 'checkbox' || input.type === 'group'
    br
  if input.type === 'textarea'
    if input.readonly
      br
      span {{#{ngModel}}}
    else
      textarea.form-control(name=input.name id=input.id)&attributes(attributes)
  else if input.type === 'editor'
    text-angular(name=input.name id=input.id)&attributes(attributes)
  else if input.type === 'image-uploader'
    //div(id=input.id)
      //- var emptyImage = ngModel;
      //include flow-uploader/image
    - var uploadButtonClick = "vulpe.ui.uploader.open('" + input.id + "')";
    - var uploadFileChange = "vulpe.ui.uploader.upload('" + input.id + "')";
    - var uploadBar = input.id + '-progressbar';
    .progress
      .progress-bar(id=uploadBar role="progressbar")
    button.btn.btn-lg.upload-btn(type="button" onclick=uploadButtonClick)=__('Upload File')
    input.hide(id=input.id type="file" name="uploads[]" multiple="multiple" onchange=uploadFileChange)
  else if input.type === 'file-uploader'
    div(id=input.id)
      include flow-uploader/file
  else if input.type === 'select'
    if input.multi
      unless input.maxHeight
        - input.maxHeight = '150px';
      br
      div(isteven-multi-select input-model=input.multi.items output-model=ngModel button-label=input.multi.label.button item-label=input.multi.label.item tick-property=input.multi.tickProperty translation="multiSelectTranslation" max-height=input.maxHeight)
    else
      select.form-control(name=input.name id=input.id)&attributes(attributes)
        if input.options
          each option in input.options
            option(value=option.value)=__(option.label)
        if input.items
          unless input.items.filter
            - input.items.filter = '';
          option(ng-repeat=`option in vulpejs.${input.items.name}${input.items.filter}` value=`{{option.${input.items.value}}}`) {{option.#{input.items.label}}}
  else if input.type === 'group'
    each option in input.options
      - var model = "vulpejs.group['" + input.name + option.value + "']";
      div(toggle-switch name=input.name model=model id=input.id ng-click=`vulpejs.ui.on.toggle.${input.name}(${model}, ${option.value});` knob-label=__(option.knob) on-label=__('Yes') off-label=__('No'))&attributes(attributes)
      br
  else if input.type === 'show'
    unless input.config
      br
      if input.i18n
        |{{#{ngModel}|i18n}}
      else if input.filter
        |{{#{ngModel}|#{input.filter}}}
      else
        span(ng-bind-html=ngModel)
    if input.config
      .well
        div
          if input.config.type === 'TEMPLATE'
            div(ng-repeat=`show in ${ngModel}`)
              span !{input.config.template}
          else if input.config.type === 'ARRAY'
            unless input.config.separator
            div(ng-repeat=`show in ${ngModel}`)
              div
                each property in input.config.properties
                  - var label = __(property.label);
                  label=label
                  br
                  if property.filter
                    span {{show.#{property.value}|#{property.filter}}}
                  else
                    span {{show.#{property.value}}}
                  br
              hr
  else if input.type === 'timer'
    br
    unless input.format
      - input.format = '{{days}}d {{hhours}}h {{mminutes}}m {{sseconds}}s'
    if input.startTime
      timer(interval="1000" start-time=ngModel) #{input.format}
    else
      timer(interval="1000") #{input.format}
  else if input.type === 'star-rating'
    br
    unless input.max
      - input.max = 5;
    unless input.on
      - input.on = {select: ''};
    unless input.on.select
      - input.on.select = '';
    unless input.readonly
      - input.readonly = 'false';
    div(star-rating max=input.max readonly=input.readonly on-select=input.on.select)&attributes(attributes)
  else if input.type === 'rating'
    br
    unless input.max
      - input.max = 5;
    unless input.on
      - input.on = {hover: '', leave: ''};
    unless input.on.hover
      - input.on.hover = '';
    unless input.on.leave
      - input.on.leave = '';
    unless input.readonly
      - input.readonly = 'false';
    rating(max=input.max readonly=input.readonly on-hover=input.on.hover on-leave=input.on.leave)&attributes(attributes)
  else if input.type === 'range-slider'
    unless input.preventValues
      - input.preventValues = true;
    unless input.attachValues
      - input.attachValues = true;
      //attach-handle-values=input.attachValues
    unless input.step
      - input.step = 1;
    unless input.filter
      - input.filter = '';
    unless input.showValues
      - input.showValues = true;
    br
    div(range-slider show-values=input.showValues step=input.step filter=input.filter prevent-equal-min-max=input.preventValues min=input.min max=input.max model-min=`${ngModel}.min` model-max=`${ngModel}.max`)&attributes(attributes)
  else
    if input.group
      .input-group&attributes(hideAttributes)
        input.form-control(type=input.type name=input.name id=input.id)&attributes(attributes)
        span.input-group-addon=input.group.value
    else if input.type === 'typeahead'
      input.form-control(type="text" name=input.name id=input.id)&attributes(attributes)
    else if input.type === 'color-picker'
      div
        input.form-control(type=input.type name=input.name id=input.id minicolors)&attributes(attributes)
    else if input.type === 'checkbox'
      input(type=input.type name=input.name id=input.id)&attributes(attributes)
    else
      input.form-control(type=input.type name=input.name id=input.id)&attributes(attributes)
  if input.validate && input.validate.message
    span(class="label label-danger" ng-cloak ng-if=`${formName}.${input.name}.$error.validator`)=__(input.validate.message)
  if input.readonly && input.type !== 'star-rating'
    div&attributes(showAttributes)
      if input.items
        span {{#{ngModel}.#{input.items.label}}}
      else
        span {{#{ngModel}}}
  if input.button
    unless input.button.type
      - input.button.type = 'button';
    unless input.button.css
      - input.button.css = {'class': 'btn-default'};
    unless input.button.on
      - input.button.on = {click: ''};
    unless input.button.show
      if input.show
        - input.button.show = input.show;
      else
        - input.button.show = ngModel;
    unless input.button.label
      - input.button.label = input.label;
    button.btn(type=input.button.type class=input.button.css['class'] ng-click=input.button.on.click ng-cloak ng-if=input.button.show)=__(input.button.label)
  if input.link
    unless input.link.css
      - input.link.css = {'class': 'btn-link'};
    unless input.link.href
      - input.link.href = '';
    unless input.link.target
      - input.link.target = '';
    unless input.link.on
      - input.link.on = {click: ''};
    unless input.link.show
      if input.show
        - input.link.show = input.show;
      else
      - input.link.show = ngModel;
    unless input.link.label
      - input.link.label = input.label;
    a.btn(class=input.link.css['class'] href=input.link.href target=input.link.target ng-click=input.link.on.click ng-cloak ng-if=input.link.show)=__(input.link.label)
